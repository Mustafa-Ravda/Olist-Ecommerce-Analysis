CREATE DATABASE Olist

USE Olist;

CREATE SCHEMA staging;

-- Ingest raw data
-- Import tables using 'import flat files' into stagin schema

SELECT * FROM staging.olist_customers_dataset
SELECT * FROM staging.olist_geolocation_dataset
SELECT * FROM staging.olist_order_items_dataset
SELECT * FROM staging.olist_order_payments_dataset
SELECT * FROM staging.olist_order_reviews_dataset
SELECT * FROM staging.olist_orders_dataset
SELECT * FROM staging.olist_products_dataset
SELECT * FROM staging.olist_sellers_dataset
SELECT * FROM staging.product_category_name_translation

CREATE SCHEMA analytics;


-- Insert cleaned data into analytics schema

SELECT * FROM analytics.cat_translation
SELECT * FROM analytics.customers
SELECT * FROM analytics.geo_grp
SELECT * FROM analytics.geolocation
SELECT * FROM analytics.order_items
SELECT * FROM analytics.order_payments
SELECT * FROM analytics.order_reviews
SELECT * FROM analytics.orders
SELECT * FROM analytics.products
SELECT * FROM analytics.sellers

CREATE TABLE analytics.state (
	state_abbr VARCHAR(2) NOT NULL PRIMARY KEY,
	state_full VARCHAR(100) NOT NULL
)

ALTER TABLE analytics.state
ALTER COLUMN state_full NVARCHAR(100);

INSERT INTO analytics.state (state_abbr, state_full)
VALUES
  ('AC', 'Acre'),
  ('AL', 'Alagoas'),
  ('AP', 'Amapá'),
  ('AM', 'Amazonas'),
  ('BA', 'Bahia'),
  ('CE', 'Ceará'),
  ('DF', 'Distrito Federal'),
  ('ES', 'Espírito Santo'),
  ('GO', 'Goiás'),
  ('MA', 'Maranhão'),
  ('MT', 'Mato Grosso'),
  ('MS', 'Mato Grosso do Sul'),
  ('MG', 'Minas Gerais'),
  ('PA', 'Pará'),
  ('PB', 'Paraíba'),
  ('PR', 'Paraná'),
  ('PE', 'Pernambuco'),
  ('PI', 'Piauí'),
  ('RJ', 'Rio de Janeiro'),
  ('RN', 'Rio Grande do Norte'),
  ('RS', 'Rio Grande do Sul'),
  ('RO', 'Rondônia'),
  ('RR', 'Roraima'),
  ('SC', 'Santa Catarina'),
  ('SP', 'São Paulo'),
  ('SE', 'Sergipe'),
  ('TO', 'Tocantins');

  SELECT * FROM analytics.state;

  /* Assign Primary Key to customers table */

  ALTER TABLE analytics.customers
  ALTER COLUMN customer_id VARCHAR(50) NOT NULL;

  ALTER TABLE analytics.customers
  ADD CONSTRAINT pk_customer_id
  PRIMARY KEY (customer_id)

  /* Assign Primary key to products table */

  ALTER TABLE analytics.products
  ALTER COLUMN product_id VARCHAR(50) NOT NULL;

  ALTER TABLE analytics.products
  ADD CONSTRAINT pk_product_id
  PRIMARY KEY (product_id);

  /* Assign Primary Key to Sellers table */

  ALTER TABLE analytics.sellers
  ALTER COLUMN seller_id VARCHAR(50) NOT NULL;

  ALTER TABLE analytics.sellers
  ADD CONSTRAINT pk_seller_id
  PRIMARY KEY (seller_id);

  /* Assign Primary key to Orders table */

  ALTER TABLE analytics.orders
  ALTER COLUMN order_id VARCHAR(50) NOT NULL;

  ALTER TABLE analytics.orders
  ADD CONSTRAINT pk_order_id
  PRIMARY KEY (order_id);

  /* Assign Foreign key constraint to Orders table */

  ALTER TABLE analytics.orders
  ADD CONSTRAINT fk_customer_id
  FOREIGN KEY (customer_id)
  REFERENCES analytics.customers(customer_id)

  /* Assign Foreign Key constraint to Order_items table */

  ALTER TABLE analytics.order_items
  ADD CONSTRAINT fk_order_id
  FOREIGN KEY (order_id)
  REFERENCES analytics.orders(order_id)

  ALTER TABLE analytics.order_items
  ADD CONSTRAINT fk_product_id
  FOREIGN KEY (product_id)
  REFERENCES analytics.products(product_id);

  ALTER TABLE analytics.order_items
  ADD CONSTRAINT fk_seller_id
  FOREIGN KEY (seller_id)
  REFERENCES analytics.sellers(seller_id);

  /* Assign Foreign Key constraint to order_payments */

  ALTER TABLE analytics.order_payments
  ADD CONSTRAINT fk_order_id_payments
  FOREIGN KEY (order_id)
  REFERENCES analytics.orders (order_id);

  /* Assign Foreign Key constraint to order_reviews table */

  ALTER TABLE analytics.order_reviews
  ADD CONSTRAINT fk_order_id_reviews
  FOREIGN KEY (order_id)
  REFERENCES analytics.orders(order_id);

  /*1.  What is the total revenue generated by Olist, and how has it changed over time? */

  -- Total revenue where status = delivered
  SELECT SUM(payment_value) AS total_revenue
  FROM analytics.order_payments p
  INNER JOIN
  analytics.orders o
  ON p.order_id = o.order_id
  WHERE o.order_status = 'delivered';

-- Total revenue by year where status = delivered
SELECT YEAR(Order_purchase_timestamp) AS current_year,
	SUM(payment_value) AS total_revenue
FROM analytics.order_payments p
INNER JOIN
analytics.orders o
ON p.order_id = o.order_id
WHERE o.order_status = 'delivered'
GROUP BY YEAR(order_purchase_timestamp);

-- Total revenue by month_year where status=delivered
SELECT FORMAT(order_purchase_timestamp, 'yyyy-MM') AS month_year,
	SUM(payment_value) AS total_revenue
FROM analytics.order_payments p
INNER JOIN
analytics.orders o
ON p.order_id = o.order_id
WHERE o.order_status = 'delivered'
GROUP BY FORMAT(order_purchase_timestamp, 'yyyy-MM')
ORDER BY FORMAT(order_purchase_timestamp, 'yyyy-MM');

  /*2. How many orders were placed on Olist, and how does this vary by month or season? */

  -- Total orders where status = delivered
  SELECT COUNT(order_id) AS order_count
  FROM analytics.orders
  WHERE order_status= 'delivered'

  -- Total orders by year_month where status = delivered
  SELECT FORMAT(order_purchase_timestamp, 'yyyy-MM') AS year_month,
	COUNT(order_id) AS order_count	
  FROM analytics.orders
  WHERE order_status = 'delivered'
  GROUP BY FORMAT(order_purchase_timestamp, 'yyyy-MM')
  ORDER BY year_month;

  /* 3. What are the most popular product categories on Olist, and how do their sales volumes
compare to each other? */


  WITH
  -- Collapse all payments into one number per order
  OrderRevenue AS (
    SELECT
      order_id,
      SUM(payment_value) AS order_rev
    FROM analytics.order_payments
    GROUP BY order_id
  ),
  -- Get one row per order and category (no duplicates)
  OrdersByCategory AS (
    SELECT DISTINCT
      oi.order_id,
      p.product_category_name_english
    FROM analytics.order_items AS oi
    JOIN analytics.products AS p
      ON oi.product_id = p.product_id
  )
SELECT
  c.product_category_name_english,
  COUNT(*)        AS order_count,
  SUM(r.order_rev) AS total_revenue
FROM OrdersByCategory AS c
JOIN analytics.orders AS o
  ON c.order_id = o.order_id
  AND o.order_status = 'delivered'
JOIN OrderRevenue AS r
  ON c.order_id = r.order_id
GROUP BY
  c.product_category_name_english
ORDER BY
  order_count DESC;

  /*4. What is the average order value (AOV) on Olist, and how does this vary by product category or payment method? */

-- Average Order value
WITH order_revenue AS (
		SELECT o.order_id,
			SUM(payment_value) AS revenue
		FROM analytics.orders o
		INNER JOIN
		analytics.order_payments op
		ON o.order_id = op.order_id
		WHERE o.order_status = 'delivered'
		GROUP BY o.order_id
)
SELECT AVG(revenue) AS average_order_value
FROM order_revenue

-- Average Order value by payment type
WITH grouped_revenue AS (
	SELECT op.payment_type,
		op.order_id,
		SUM(payment_value) AS revenue
	FROM analytics.order_payments op
	INNER JOIN analytics.orders o
	ON o.order_id = op.order_id
	WHERE o.order_status = 'delivered'
	GROUP BY op.payment_type, op.order_id
)
SELECT payment_type,
	AVG(revenue) AS avg_revenue
FROM grouped_revenue
GROUP BY payment_type


--Average order value by product_category
WITH order_revenue AS (
	SELECT op.order_id,
		SUM(payment_value) AS revenue
	FROM analytics.order_payments op
	INNER JOIN analytics.orders o
	ON op.order_id = o.order_id
	WHERE o.order_status = 'delivered'
	GROUP BY op.order_id
),
orders_by_category AS (
	SELECT DISTINCT
		oi.order_id,
		p.product_category_name_english
	FROM analytics.order_items oi
	INNER JOIN analytics.products p
	ON oi.product_id = p.product_id
)
SELECT c.product_category_name_english,
	AVG(revenue) AS avg_revenue
FROM orderS_by_category c
INNER JOIN order_revenue d
ON c.order_id = d.order_id
GROUP BY c.product_category_name_english
ORDER BY avg_revenue DESC;

/* 5. How many sellers are active on Olist? */

SELECT COUNT(DISTINCT seller_id) AS active_sellers
FROM analytics.order_items oi
INNER JOIN analytics.orders o
ON oi.order_id = o.order_id
WHERE o.order_status = 'delivered'


/* 6. What is the average rating? */

SELECT CAST(AVG(review_score*1.0) AS DECIMAL(3,2)) AS avg_rating
FROM analytics.order_reviews r
INNER JOIN analytics.orders o
ON r.order_id = o.order_id
WHERE o.order_status = 'delivered'

/* 7. How many customers have made repeat purchases on Olist? */

WITH repeat_customers AS (
SELECT customer_unique_id,
	COUNT(customer_unique_id) AS ct
FROM analytics.customers c
INNER JOIN
analytics.orders o
ON c.customer_id = o.customer_id
WHERE o.order_status = 'delivered'
GROUP BY customer_unique_id
HAVING COUNT(customer_unique_id) >1
)
SELECT COUNT(*) AS repeat_purchase FROM repeat_customers;


/* 8: What is the average order cancellation rate on Olist? */

SELECT CAST(
	COUNT(*) * 100.0 / (SELECT COUNT(*) FROM analytics.orders) 
		AS DECIMAL(3,2)) AS avg_cancellation_rate 
FROM analytics.orders
WHERE order_status = 'canceled';


/* 9: Which payment methods are most commonly used by Olist customers? */

CREATE NONCLUSTERED INDEX order_id_order_status
ON analytics.orders(order_id, order_status);

CREATE NONCLUSTERED INDEX order_payments_order_id_payment_type
ON analytics.order_payments(order_id, payment_type);

SELECT payment_type,
	COUNT(DISTINCT o.order_id) AS count_payment
FROM analytics.order_payments op
INNER JOIN analytics.orders o
ON op.order_id = o.order_id
	AND o.order_status = 'delivered'
GROUP BY payment_type
ORDER BY count_payment DESC;



